{"$message_type":"diagnostic","message":"failed to resolve: use of undeclared crate or module `ark_test_curves`","code":{"code":"E0433","explanation":"An undeclared crate, module, or type was used.\n\nErroneous code example:\n\n```compile_fail,E0433\nlet map = HashMap::new();\n// error: failed to resolve: use of undeclared type `HashMap`\n```\n\nPlease verify you didn't misspell the type/module's name or that you didn't\nforget to import it:\n\n```\nuse std::collections::HashMap; // HashMap has been imported.\nlet map: HashMap<u32, u32> = HashMap::new(); // So it can be used!\n```\n\nIf you've expected to use a crate name:\n\n```compile_fail\nuse ferris_wheel::BigO;\n// error: failed to resolve: use of undeclared crate or module `ferris_wheel`\n```\n\nMake sure the crate has been added as a dependency in `Cargo.toml`.\n\nTo use a module from your current crate, add the `crate::` prefix to the path.\n"},"level":"error","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4819,"byte_end":4834,"line_start":181,"line_end":181,"column_start":9,"column_end":24,"is_primary":true,"text":[{"text":"    use ark_test_curves::bls12_381::Fr;","highlight_start":9,"highlight_end":24}],"label":"use of undeclared crate or module `ark_test_curves`","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0433]\u001b[0m\u001b[0m\u001b[1m: failed to resolve: use of undeclared crate or module `ark_test_curves`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpolynomials/src/univariat_polynomial.rs:181:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m181\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use ark_test_curves::bls12_381::Fr;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9muse of undeclared crate or module `ark_test_curves`\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"unused import: `ark_ff::Field`","code":{"code":"unused_imports","explanation":null},"level":"warning","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4731,"byte_end":4744,"line_start":178,"line_end":178,"column_start":9,"column_end":22,"is_primary":true,"text":[{"text":"    use ark_ff::Field;","highlight_start":9,"highlight_end":22}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"`#[warn(unused_imports)]` on by default","code":null,"level":"note","spans":[],"children":[],"rendered":null},{"message":"remove the whole `use` item","code":null,"level":"help","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4727,"byte_end":4745,"line_start":178,"line_end":178,"column_start":5,"column_end":23,"is_primary":true,"text":[{"text":"    use ark_ff::Field;","highlight_start":5,"highlight_end":23}],"label":null,"suggested_replacement":"","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[33mwarning\u001b[0m\u001b[0m\u001b[1m: unused import: `ark_ff::Field`\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpolynomials/src/univariat_polynomial.rs:178:9\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m178\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    use ark_ff::Field;\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        \u001b[0m\u001b[0m\u001b[1m\u001b[33m^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: `#[warn(unused_imports)]` on by default\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"the trait `PrimeField` cannot be made into an object","code":{"code":"E0038","explanation":"For any given trait `Trait` there may be a related _type_ called the _trait\nobject type_ which is typically written as `dyn Trait`. In earlier editions of\nRust, trait object types were written as plain `Trait` (just the name of the\ntrait, written in type positions) but this was a bit too confusing, so we now\nwrite `dyn Trait`.\n\nSome traits are not allowed to be used as trait object types. The traits that\nare allowed to be used as trait object types are called \"object-safe\" traits.\nAttempting to use a trait object type for a trait that is not object-safe will\ntrigger error E0038.\n\nTwo general aspects of trait object types give rise to the restrictions:\n\n  1. Trait object types are dynamically sized types (DSTs), and trait objects of\n     these types can only be accessed through pointers, such as `&dyn Trait` or\n     `Box<dyn Trait>`. The size of such a pointer is known, but the size of the\n     `dyn Trait` object pointed-to by the pointer is _opaque_ to code working\n     with it, and different trait objects with the same trait object type may\n     have different sizes.\n\n  2. The pointer used to access a trait object is paired with an extra pointer\n     to a \"virtual method table\" or \"vtable\", which is used to implement dynamic\n     dispatch to the object's implementations of the trait's methods. There is a\n     single such vtable for each trait implementation, but different trait\n     objects with the same trait object type may point to vtables from different\n     implementations.\n\nThe specific conditions that violate object-safety follow, most of which relate\nto missing size information and vtable polymorphism arising from these aspects.\n\n### The trait requires `Self: Sized`\n\nTraits that are declared as `Trait: Sized` or which otherwise inherit a\nconstraint of `Self:Sized` are not object-safe.\n\nThe reasoning behind this is somewhat subtle. It derives from the fact that Rust\nrequires (and defines) that every trait object type `dyn Trait` automatically\nimplements `Trait`. Rust does this to simplify error reporting and ease\ninteroperation between static and dynamic polymorphism. For example, this code\nworks:\n\n```\ntrait Trait {\n}\n\nfn static_foo<T:Trait + ?Sized>(b: &T) {\n}\n\nfn dynamic_bar(a: &dyn Trait) {\n    static_foo(a)\n}\n```\n\nThis code works because `dyn Trait`, if it exists, always implements `Trait`.\n\nHowever as we know, any `dyn Trait` is also unsized, and so it can never\nimplement a sized trait like `Trait:Sized`. So, rather than allow an exception\nto the rule that `dyn Trait` always implements `Trait`, Rust chooses to prohibit\nsuch a `dyn Trait` from existing at all.\n\nOnly unsized traits are considered object-safe.\n\nGenerally, `Self: Sized` is used to indicate that the trait should not be used\nas a trait object. If the trait comes from your own crate, consider removing\nthis restriction.\n\n### Method references the `Self` type in its parameters or return type\n\nThis happens when a trait has a method like the following:\n\n```\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nimpl Trait for String {\n    fn foo(&self) -> Self {\n        \"hi\".to_owned()\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) -> Self {\n        1\n    }\n}\n```\n\n(Note that `&self` and `&mut self` are okay, it's additional `Self` types which\ncause this problem.)\n\nIn such a case, the compiler cannot predict the return type of `foo()` in a\nsituation like the following:\n\n```compile_fail,E0038\ntrait Trait {\n    fn foo(&self) -> Self;\n}\n\nfn call_foo(x: Box<dyn Trait>) {\n    let y = x.foo(); // What type is y?\n    // ...\n}\n```\n\nIf only some methods aren't object-safe, you can add a `where Self: Sized` bound\non them to mark them as explicitly unavailable to trait objects. The\nfunctionality will still be available to all other implementers, including\n`Box<dyn Trait>` which is itself sized (assuming you `impl Trait for Box<dyn\nTrait>`).\n\n```\ntrait Trait {\n    fn foo(&self) -> Self where Self: Sized;\n    // more functions\n}\n```\n\nNow, `foo()` can no longer be called on a trait object, but you will now be\nallowed to make a trait object, and that will be able to call any object-safe\nmethods. With such a bound, one can still call `foo()` on types implementing\nthat trait that aren't behind trait objects.\n\n### Method has generic type parameters\n\nAs mentioned before, trait objects contain pointers to method tables. So, if we\nhave:\n\n```\ntrait Trait {\n    fn foo(&self);\n}\n\nimpl Trait for String {\n    fn foo(&self) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo(&self) {\n        // implementation 2\n    }\n}\n// ...\n```\n\nAt compile time each implementation of `Trait` will produce a table containing\nthe various methods (and other items) related to the implementation, which will\nbe used as the virtual method table for a `dyn Trait` object derived from that\nimplementation.\n\nThis works fine, but when the method gains generic parameters, we can have a\nproblem.\n\nUsually, generic parameters get _monomorphized_. For example, if I have\n\n```\nfn foo<T>(x: T) {\n    // ...\n}\n```\n\nThe machine code for `foo::<u8>()`, `foo::<bool>()`, `foo::<String>()`, or any\nother instantiation is different. Hence the compiler generates the\nimplementation on-demand. If you call `foo()` with a `bool` parameter, the\ncompiler will only generate code for `foo::<bool>()`. When we have additional\ntype parameters, the number of monomorphized implementations the compiler\ngenerates does not grow drastically, since the compiler will only generate an\nimplementation if the function is called with fully concrete arguments\n(i.e., arguments which do not contain any generic parameters).\n\nHowever, with trait objects we have to make a table containing _every_ object\nthat implements the trait. Now, if it has type parameters, we need to add\nimplementations for every type that implements the trait, and there could\ntheoretically be an infinite number of types.\n\nFor example, with:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T);\n    // more methods\n}\n\nimpl Trait for String {\n    fn foo<T>(&self, on: T) {\n        // implementation 1\n    }\n}\n\nimpl Trait for u8 {\n    fn foo<T>(&self, on: T) {\n        // implementation 2\n    }\n}\n\n// 8 more implementations\n```\n\nNow, if we have the following code:\n\n```compile_fail,E0038\n# trait Trait { fn foo<T>(&self, on: T); }\n# impl Trait for String { fn foo<T>(&self, on: T) {} }\n# impl Trait for u8 { fn foo<T>(&self, on: T) {} }\n# impl Trait for bool { fn foo<T>(&self, on: T) {} }\n# // etc.\nfn call_foo(thing: Box<dyn Trait>) {\n    thing.foo(true); // this could be any one of the 8 types above\n    thing.foo(1);\n    thing.foo(\"hello\");\n}\n```\n\nWe don't just need to create a table of all implementations of all methods of\n`Trait`, we need to create such a table, for each different type fed to\n`foo()`. In this case this turns out to be (10 types implementing `Trait`)\\*(3\ntypes being fed to `foo()`) = 30 implementations!\n\nWith real world traits these numbers can grow drastically.\n\nTo fix this, it is suggested to use a `where Self: Sized` bound similar to the\nfix for the sub-error above if you do not intend to call the method with type\nparameters:\n\n```\ntrait Trait {\n    fn foo<T>(&self, on: T) where Self: Sized;\n    // more methods\n}\n```\n\nIf this is not an option, consider replacing the type parameter with another\ntrait object (e.g., if `T: OtherTrait`, use `on: Box<dyn OtherTrait>`). If the\nnumber of types you intend to feed to this method is limited, consider manually\nlisting out the methods of different types.\n\n### Method has no receiver\n\nMethods that do not take a `self` parameter can't be called since there won't be\na way to get a pointer to the method table for them.\n\n```\ntrait Foo {\n    fn foo() -> u8;\n}\n```\n\nThis could be called as `<Foo as Foo>::foo()`, which would not be able to pick\nan implementation.\n\nAdding a `Self: Sized` bound to these methods will generally make this compile.\n\n```\ntrait Foo {\n    fn foo() -> u8 where Self: Sized;\n}\n```\n\n### Trait contains associated constants\n\nJust like static functions, associated constants aren't stored on the method\ntable. If the trait or any subtrait contain an associated constant, they cannot\nbe made into an object.\n\n```compile_fail,E0038\ntrait Foo {\n    const X: i32;\n}\n\nimpl Foo {}\n```\n\nA simple workaround is to use a helper method instead:\n\n```\ntrait Foo {\n    fn x(&self) -> i32;\n}\n```\n\n### Trait uses `Self` as a type parameter in the supertrait listing\n\nThis is similar to the second sub-error, but subtler. It happens in situations\nlike the following:\n\n```compile_fail,E0038\ntrait Super<A: ?Sized> {}\n\ntrait Trait: Super<Self> {\n}\n\nstruct Foo;\n\nimpl Super<Foo> for Foo{}\n\nimpl Trait for Foo {}\n\nfn main() {\n    let x: Box<dyn Trait>;\n}\n```\n\nHere, the supertrait might have methods as follows:\n\n```\ntrait Super<A: ?Sized> {\n    fn get_a(&self) -> &A; // note that this is object safe!\n}\n```\n\nIf the trait `Trait` was deriving from something like `Super<String>` or\n`Super<T>` (where `Foo` itself is `Foo<T>`), this is okay, because given a type\n`get_a()` will definitely return an object of that type.\n\nHowever, if it derives from `Super<Self>`, even though `Super` is object safe,\nthe method `get_a()` would return an object of unknown type when called on the\nfunction. `Self` type parameters let us make object safe traits no longer safe,\nso they are forbidden when specifying supertraits.\n\nThere's no easy fix for this. Generally, code will need to be refactored so that\nyou no longer need to derive from `Super<Self>`.\n"},"level":"error","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4953,"byte_end":4963,"line_start":186,"line_end":186,"column_start":53,"column_end":63,"is_primary":true,"text":[{"text":"        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);","highlight_start":53,"highlight_end":63}],"label":"`PrimeField` cannot be made into an object","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>","code":null,"level":"note","spans":[{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/prime.rs","byte_start":1163,"byte_end":1197,"line_start":31,"line_end":31,"column_start":7,"column_end":41,"is_primary":true,"text":[{"text":"    + From<<Self as PrimeField>::BigInt>","highlight_start":7,"highlight_end":41}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/prime.rs","byte_start":1204,"byte_end":1238,"line_start":32,"line_end":32,"column_start":7,"column_end":41,"is_primary":true,"text":[{"text":"    + Into<<Self as PrimeField>::BigInt>","highlight_start":7,"highlight_end":41}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3415,"byte_end":3439,"line_start":116,"line_end":116,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"    + Add<Self, Output = Self>","highlight_start":7,"highlight_end":31}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3425,"byte_end":3438,"line_start":116,"line_end":116,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    + Add<Self, Output = Self>","highlight_start":17,"highlight_end":30}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3446,"byte_end":3470,"line_start":117,"line_end":117,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"    + Sub<Self, Output = Self>","highlight_start":7,"highlight_end":31}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3456,"byte_end":3469,"line_start":117,"line_end":117,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    + Sub<Self, Output = Self>","highlight_start":17,"highlight_end":30}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3477,"byte_end":3501,"line_start":118,"line_end":118,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"    + Mul<Self, Output = Self>","highlight_start":7,"highlight_end":31}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3487,"byte_end":3500,"line_start":118,"line_end":118,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    + Mul<Self, Output = Self>","highlight_start":17,"highlight_end":30}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3508,"byte_end":3532,"line_start":119,"line_end":119,"column_start":7,"column_end":31,"is_primary":true,"text":[{"text":"    + Div<Self, Output = Self>","highlight_start":7,"highlight_end":31}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3518,"byte_end":3531,"line_start":119,"line_end":119,"column_start":17,"column_end":30,"is_primary":true,"text":[{"text":"    + Div<Self, Output = Self>","highlight_start":17,"highlight_end":30}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3539,"byte_end":3554,"line_start":120,"line_end":120,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"    + AddAssign<Self>","highlight_start":7,"highlight_end":22}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3561,"byte_end":3576,"line_start":121,"line_end":121,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"    + SubAssign<Self>","highlight_start":7,"highlight_end":22}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3583,"byte_end":3598,"line_start":122,"line_end":122,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"    + MulAssign<Self>","highlight_start":7,"highlight_end":22}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3605,"byte_end":3620,"line_start":123,"line_end":123,"column_start":7,"column_end":22,"is_primary":true,"text":[{"text":"    + DivAssign<Self>","highlight_start":7,"highlight_end":22}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3627,"byte_end":3663,"line_start":124,"line_end":124,"column_start":7,"column_end":43,"is_primary":true,"text":[{"text":"    + for<'a> Add<&'a Self, Output = Self>","highlight_start":7,"highlight_end":43}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3649,"byte_end":3662,"line_start":124,"line_end":124,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"    + for<'a> Add<&'a Self, Output = Self>","highlight_start":29,"highlight_end":42}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3670,"byte_end":3706,"line_start":125,"line_end":125,"column_start":7,"column_end":43,"is_primary":true,"text":[{"text":"    + for<'a> Sub<&'a Self, Output = Self>","highlight_start":7,"highlight_end":43}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3692,"byte_end":3705,"line_start":125,"line_end":125,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"    + for<'a> Sub<&'a Self, Output = Self>","highlight_start":29,"highlight_end":42}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3713,"byte_end":3749,"line_start":126,"line_end":126,"column_start":7,"column_end":43,"is_primary":true,"text":[{"text":"    + for<'a> Mul<&'a Self, Output = Self>","highlight_start":7,"highlight_end":43}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3735,"byte_end":3748,"line_start":126,"line_end":126,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"    + for<'a> Mul<&'a Self, Output = Self>","highlight_start":29,"highlight_end":42}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3756,"byte_end":3792,"line_start":127,"line_end":127,"column_start":7,"column_end":43,"is_primary":true,"text":[{"text":"    + for<'a> Div<&'a Self, Output = Self>","highlight_start":7,"highlight_end":43}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3778,"byte_end":3791,"line_start":127,"line_end":127,"column_start":29,"column_end":42,"is_primary":true,"text":[{"text":"    + for<'a> Div<&'a Self, Output = Self>","highlight_start":29,"highlight_end":42}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3799,"byte_end":3826,"line_start":128,"line_end":128,"column_start":7,"column_end":34,"is_primary":true,"text":[{"text":"    + for<'a> AddAssign<&'a Self>","highlight_start":7,"highlight_end":34}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3833,"byte_end":3860,"line_start":129,"line_end":129,"column_start":7,"column_end":34,"is_primary":true,"text":[{"text":"    + for<'a> SubAssign<&'a Self>","highlight_start":7,"highlight_end":34}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3867,"byte_end":3894,"line_start":130,"line_end":130,"column_start":7,"column_end":34,"is_primary":true,"text":[{"text":"    + for<'a> MulAssign<&'a Self>","highlight_start":7,"highlight_end":34}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3901,"byte_end":3928,"line_start":131,"line_end":131,"column_start":7,"column_end":34,"is_primary":true,"text":[{"text":"    + for<'a> DivAssign<&'a Self>","highlight_start":7,"highlight_end":34}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3935,"byte_end":3975,"line_start":132,"line_end":132,"column_start":7,"column_end":47,"is_primary":true,"text":[{"text":"    + for<'a> Add<&'a mut Self, Output = Self>","highlight_start":7,"highlight_end":47}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3961,"byte_end":3974,"line_start":132,"line_end":132,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"    + for<'a> Add<&'a mut Self, Output = Self>","highlight_start":33,"highlight_end":46}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":3982,"byte_end":4022,"line_start":133,"line_end":133,"column_start":7,"column_end":47,"is_primary":true,"text":[{"text":"    + for<'a> Sub<&'a mut Self, Output = Self>","highlight_start":7,"highlight_end":47}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4008,"byte_end":4021,"line_start":133,"line_end":133,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"    + for<'a> Sub<&'a mut Self, Output = Self>","highlight_start":33,"highlight_end":46}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4029,"byte_end":4069,"line_start":134,"line_end":134,"column_start":7,"column_end":47,"is_primary":true,"text":[{"text":"    + for<'a> Mul<&'a mut Self, Output = Self>","highlight_start":7,"highlight_end":47}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4055,"byte_end":4068,"line_start":134,"line_end":134,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"    + for<'a> Mul<&'a mut Self, Output = Self>","highlight_start":33,"highlight_end":46}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4076,"byte_end":4116,"line_start":135,"line_end":135,"column_start":7,"column_end":47,"is_primary":true,"text":[{"text":"    + for<'a> Div<&'a mut Self, Output = Self>","highlight_start":7,"highlight_end":47}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4102,"byte_end":4115,"line_start":135,"line_end":135,"column_start":33,"column_end":46,"is_primary":true,"text":[{"text":"    + for<'a> Div<&'a mut Self, Output = Self>","highlight_start":33,"highlight_end":46}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4123,"byte_end":4154,"line_start":136,"line_end":136,"column_start":7,"column_end":38,"is_primary":true,"text":[{"text":"    + for<'a> AddAssign<&'a mut Self>","highlight_start":7,"highlight_end":38}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4161,"byte_end":4192,"line_start":137,"line_end":137,"column_start":7,"column_end":38,"is_primary":true,"text":[{"text":"    + for<'a> SubAssign<&'a mut Self>","highlight_start":7,"highlight_end":38}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4199,"byte_end":4230,"line_start":138,"line_end":138,"column_start":7,"column_end":38,"is_primary":true,"text":[{"text":"    + for<'a> MulAssign<&'a mut Self>","highlight_start":7,"highlight_end":38}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4237,"byte_end":4268,"line_start":139,"line_end":139,"column_start":7,"column_end":38,"is_primary":true,"text":[{"text":"    + for<'a> DivAssign<&'a mut Self>","highlight_start":7,"highlight_end":38}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4275,"byte_end":4296,"line_start":140,"line_end":140,"column_start":7,"column_end":28,"is_primary":true,"text":[{"text":"    + core::iter::Sum<Self>","highlight_start":7,"highlight_end":28}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4303,"byte_end":4336,"line_start":141,"line_end":141,"column_start":7,"column_end":40,"is_primary":true,"text":[{"text":"    + for<'a> core::iter::Sum<&'a Self>","highlight_start":7,"highlight_end":40}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4343,"byte_end":4368,"line_start":142,"line_end":142,"column_start":7,"column_end":32,"is_primary":true,"text":[{"text":"    + core::iter::Product<Self>","highlight_start":7,"highlight_end":32}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs","byte_start":4375,"byte_end":4412,"line_start":143,"line_end":143,"column_start":7,"column_end":44,"is_primary":true,"text":[{"text":"    + for<'a> core::iter::Product<&'a Self>","highlight_start":7,"highlight_end":44}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":27340,"byte_end":27356,"line_start":818,"line_end":818,"column_start":21,"column_end":37,"is_primary":true,"text":[{"text":"pub trait Ord: Eq + PartialOrd<Self> {","highlight_start":21,"highlight_end":37}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.18/src/identities.rs","byte_start":2317,"byte_end":2341,"line_start":106,"line_end":106,"column_start":24,"column_end":48,"is_primary":true,"text":[{"text":"pub trait One: Sized + Mul<Self, Output = Self> {","highlight_start":24,"highlight_end":48}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.18/src/identities.rs","byte_start":2327,"byte_end":2340,"line_start":106,"line_end":106,"column_start":34,"column_end":47,"is_primary":true,"text":[{"text":"pub trait One: Sized + Mul<Self, Output = Self> {","highlight_start":34,"highlight_end":47}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.18/src/identities.rs","byte_start":239,"byte_end":263,"line_start":12,"line_end":12,"column_start":25,"column_end":49,"is_primary":true,"text":[{"text":"pub trait Zero: Sized + Add<Self, Output = Self> {","highlight_start":25,"highlight_end":49}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.18/src/identities.rs","byte_start":249,"byte_end":262,"line_start":12,"line_end":12,"column_start":35,"column_end":48,"is_primary":true,"text":[{"text":"pub trait Zero: Sized + Add<Self, Output = Self> {","highlight_start":35,"highlight_end":48}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null},{"file_name":"/Users/ayomide/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs","byte_start":12190,"byte_end":12205,"line_start":329,"line_end":329,"column_start":15,"column_end":30,"is_primary":true,"text":[{"text":"pub trait Eq: PartialEq<Self> {","highlight_start":15,"highlight_end":30}],"label":"the trait cannot be made into an object because it uses `Self` as a type parameter","suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[],"rendered":null},{"message":"only type `ark_ff::Fp<P, N>` implements the trait, consider using it directly instead","code":null,"level":"help","spans":[],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0038]\u001b[0m\u001b[0m\u001b[1m: the trait `PrimeField` cannot be made into an object\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpolynomials/src/univariat_polynomial.rs:186:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m`PrimeField` cannot be made into an object\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;10mnote\u001b[0m\u001b[0m: for a trait to be \"object safe\" it needs to allow building a vtable to allow the call to be resolvable dynamically; for more information visit <https://doc.rust-lang.org/reference/items/traits.html#object-safety>\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/mod.rs:116:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m116\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Add<Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m117\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Sub<Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m118\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Mul<Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m119\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Div<Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m120\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + AddAssign<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m121\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + SubAssign<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m122\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + MulAssign<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m123\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + DivAssign<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m124\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Add<&'a Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m125\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Sub<&'a Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m126\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Mul<&'a Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m127\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Div<&'a Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                     \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m128\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> AddAssign<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m129\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> SubAssign<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m130\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> MulAssign<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m131\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> DivAssign<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m132\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Add<&'a mut Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m133\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Sub<&'a mut Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m134\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Mul<&'a mut Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m135\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> Div<&'a mut Self, Output = Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m                         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m136\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> AddAssign<&'a mut Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m137\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> SubAssign<&'a mut Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m138\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> MulAssign<&'a mut Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m139\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> DivAssign<&'a mut Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m140\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + core::iter::Sum<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m141\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> core::iter::Sum<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m142\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + core::iter::Product<Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m143\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + for<'a> core::iter::Product<&'a Self>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/ark-ff-0.4.2/src/fields/prime.rs:31:7\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m31\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + From<<Self as PrimeField>::BigInt>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m32\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m    + Into<<Self as PrimeField>::BigInt>\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m      \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/ayomide/.rustup/toolchains/nightly-aarch64-apple-darwin/lib/rustlib/src/rust/library/core/src/cmp.rs:329:15\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m329\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Eq: PartialEq<Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m              \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m818\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Ord: Eq + PartialOrd<Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m::: \u001b[0m\u001b[0m/Users/ayomide/.cargo/registry/src/index.crates.io-6f17d22bba15001f/num-traits-0.2.18/src/identities.rs:12:25\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m12\u001b[0m\u001b[0m  \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait Zero: Sized + Add<Self, Output = Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                        \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m...\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m106\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0mpub trait One: Sized + Mul<Self, Output = Self> {\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10m|\u001b[0m\u001b[0m         \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                       \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;10mthe trait cannot be made into an object because it uses `Self` as a type parameter\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mhelp\u001b[0m\u001b[0m: only type `ark_ff::Fp<P, N>` implements the trait, consider using it directly instead\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"trait objects must include the `dyn` keyword","code":{"code":"E0782","explanation":"Trait objects must include the `dyn` keyword.\n\nErroneous code example:\n\n```edition2021,compile_fail,E0782\ntrait Foo {}\nfn test(arg: Box<Foo>) {} // error!\n```\n\nTrait objects are a way to call methods on types that are not known until\nruntime but conform to some trait.\n\nTrait objects should be formed with `Box<dyn Foo>`, but in the code above\n`dyn` is left off.\n\nThis makes it harder to see that `arg` is a trait object and not a\nsimply a heap allocated type called `Foo`.\n\nTo fix this issue, add `dyn` before the trait name.\n\n```edition2021\ntrait Foo {}\nfn test(arg: Box<dyn Foo>) {} // ok!\n```\n\nThis used to be allowed before edition 2021, but is now an error.\n"},"level":"error","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4953,"byte_end":4963,"line_start":186,"line_end":186,"column_start":53,"column_end":63,"is_primary":true,"text":[{"text":"        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);","highlight_start":53,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}],"children":[{"message":"add `dyn` keyword before this trait","code":null,"level":"help","spans":[{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4953,"byte_end":4953,"line_start":186,"line_end":186,"column_start":53,"column_end":53,"is_primary":true,"text":[{"text":"        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);","highlight_start":53,"highlight_end":53}],"label":null,"suggested_replacement":"<dyn ","suggestion_applicability":"MachineApplicable","expansion":null},{"file_name":"polynomials/src/univariat_polynomial.rs","byte_start":4963,"byte_end":4963,"line_start":186,"line_end":186,"column_start":63,"column_end":63,"is_primary":true,"text":[{"text":"        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);","highlight_start":63,"highlight_end":63}],"label":null,"suggested_replacement":">","suggestion_applicability":"MachineApplicable","expansion":null}],"children":[],"rendered":null}],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0782]\u001b[0m\u001b[0m\u001b[1m: trait objects must include the `dyn` keyword\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0mpolynomials/src/univariat_polynomial.rs:186:53\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m \u001b[0m\u001b[0m        let poly_1 = UnivariantPolynomial::new(vec![PrimeField::from(2)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m                                                    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;14mhelp\u001b[0m\u001b[0m: add `dyn` keyword before this trait\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m186\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m        let poly_1 = UnivariantPolynomial::new(vec![\u001b[0m\u001b[0m\u001b[38;5;10m<dyn \u001b[0m\u001b[0mPrimeField\u001b[0m\u001b[0m\u001b[38;5;10m>\u001b[0m\u001b[0m::from(2)]);\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\u001b[0m                                                     \u001b[0m\u001b[0m\u001b[38;5;10m++++\u001b[0m\u001b[0m           \u001b[0m\u001b[0m\u001b[38;5;10m+\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"aborting due to 3 previous errors; 1 warning emitted","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 3 previous errors; 1 warning emitted\u001b[0m\n\n"}
{"$message_type":"diagnostic","message":"Some errors have detailed explanations: E0038, E0433, E0782.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mSome errors have detailed explanations: E0038, E0433, E0782.\u001b[0m\n"}
{"$message_type":"diagnostic","message":"For more information about an error, try `rustc --explain E0038`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about an error, try `rustc --explain E0038`.\u001b[0m\n"}
